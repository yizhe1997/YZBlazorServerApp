@page "/checkout"
@using YZBlazorServerApp.Pages.Items
@using YZBlazorServerApp.Datas.Models.Orders;
@inject ItemConfigDialogService ItemConfigDialogService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="top-bar">
    <a class="logo" href="">
        <img src="img/logo.svg" />
    </a>

    <NavLink href="" class="nav-tab" Match="NavLinkMatch.All">
        <img src="img/pizza-slice.svg" />
        <div>Get Pizza</div>
    </NavLink>

    <NavLink href="orders" class="nav-tab">
        <img src="img/bike.svg" />
        <div>My Orders</div>
    </NavLink>
</div>

<div class="main">
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            @foreach (var line in order.OrderLines)
            {
                <p>
                    <strong>
                        @(line?.ItemCode)"
                        @line?.ItemDescription
                        (£@line?.GetFormattedTotalPrice())
                    </strong>
                </p>
            }

            <p>
                <strong>
                    Total price:
                    £@order.GetFormattedTotalPrice()
                </strong>
            </p>
        </div>
    </div>

    <button class="checkout-button btn btn-warning" @onclick="PlaceOrder" disabled=@isSubmitting>
        Place order
    </button>
</div>

@code {
    Datas.Models.Orders.Order order => ItemConfigDialogService.Order;

    bool isSubmitting;

    async Task PlaceOrder()
    {
        isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}orders", order);
        //var newOrderId = await response.Content.ReadFromJsonAsync<Guid>();
        var contentError = await response.Content.ReadAsStringAsync();
        ItemConfigDialogService.ResetOrder();
        NavigationManager.NavigateTo("/order");
    }
}